# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ff9mfUMMy3dXmRSKvpG66aIrEsnKPyH

# Bibliotecas
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score

#rede neural
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.callbacks import ModelCheckpoint

"""# Ler base de dados

Variable Notes
pclass: A proxy for socio-economic status (SES)
1st = Upper
2nd = Middle
3rd = Lower

age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5

sibsp: The dataset defines family relations in this way...
Sibling = brother, sister, stepbrother, stepsister
Spouse = husband, wife (mistresses and fiancés were ignored)

parch: The dataset defines family relations in this way...
Parent = mother, father
Child = daughter, son, stepdaughter, stepson
Some children travelled only with a nanny, therefore parch=0 for them.
"""

from google.colab import drive
drive.mount('/content/drive')

train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/titanic/train.csv')
test  = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/titanic/test.csv')

"""# Tratamento dos dados"""

train.columns

#passando survived para última coluna
train = train[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked','Survived']]
train.columns

#descartando colunas não utilizadas
train = train.drop(['PassengerId', 'Name', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis = 1)

train

#checando nulos
train.isnull().sum()

#atribuindo idade meida para as idades nulas
train['Age'] = train['Age'].fillna(np.ceil(train['Age'].mean()))

train.info()

#sexo feminino = 1 e masculino = 0
train['Sex'] = train['Sex'].replace('male', 0)
train['Sex'] = train['Sex'].replace('female', 1)

#convertendo idade como inteiro
train['Age'] = train['Age'].astype(int)

train.columns

#organizando as colunas conforme entrada desejada
train = train[['Age', 'Sex', 'Pclass',  'SibSp', 'Parch', 'Survived']]

from google.colab import files

train.to_csv('titanic.csv', encoding = 'utf-8', index=False) 
files.download('titanic.csv')

"""# Separando as classes"""

y = train['Survived']
y

X = train.drop(['Survived'], axis=1)
X

"""# Random forest Classifier"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_digits
from sklearn.preprocessing import scale
# %matplotlib inline

clf = RandomForestClassifier(n_estimators  = 30)

clf = clf.fit(X, y)

scores = clf.score(X,y)
print (scores)

"""# Divisão entre treino e teste"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=101)

"""# Random Forest Regressor"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
# %matplotlib inline

reg = RandomForestRegressor(n_estimators = 1000, min_samples_leaf = 1, random_state = 101)
modelo = reg.fit(X_train, y_train)

previsoes = modelo.predict(X_test)

mean_squared_error(previsoes, y_test)

previsoes